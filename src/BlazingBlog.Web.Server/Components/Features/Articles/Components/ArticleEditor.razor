@page "/article-editor"
@page "/article-editor/{ArticleId:int}"
@using BlazingBlog.Application.Articles.GetArticleByIdForEditing
@using BlazingBlog.WebUI.Server.Features.Articles

@inject ISender Sender
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin, Writer")]

@if (IsEditMode && Article is not null)
{

	<PageTitle>Edit Article "@Article.Title"</PageTitle>

	<h2 class="text-3xl font-extrabold text-gray-50">Edit Article "@Article.Title" by @Article.UserName</h2>

}
else if (!string.IsNullOrEmpty(_errorMessage))
{

	<PageTitle>Error</PageTitle>

	<span class="text-2xl font-extrabold text-danger">@_errorMessage</span>

}
else
{

	<PageTitle>Create New Article</PageTitle>

	<h2 class="text-3xl font-extrabold text-gray-50">Create New Article</h2>

}
@if (Article is not null)
{

	<EditForm Model="@Article" OnSubmit="HandleSubmit" FormName="ArticleEditorForm" class="space-y-6 my-4">
		<div>
			<label for="title" class="text-sm">Title</label>
			<InputText id="title" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 shadow-md"
			           placeholder="Enter your Title here" @bind-Value="@Article.Title"/>
		</div>
		<div>
			<label for="content" class="text-sm">Content</label>
			<InputTextArea id="content" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 shadow-md"
			               placeholder="Enter your content here" @bind-Value="@Article.Content"/>
		</div>

		<div>
			<label for="published" class="text-sm">Published Date</label>
			<InputDate id="published" Type="InputDateType.DateTimeLocal" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 shadow-md"
			           @bind-Value="@Article.PublishedOn"/>
		</div>

		<div class="form-check">
			<InputCheckbox class="form-check-input checked:bg-blue-400" @bind-Value="@Article.IsPublished"/>
			<label class="form-check-label">Is Published</label>
		</div>

		<button class="w-full p-3 text-sm font-bold uppercase rounded bg-blue-400 text-gray-900 hover:text-blue-700" type="submit">Submit
		</button>

	</EditForm>

	if (IsEditMode)
	{

		<p>
		<h2 class="text-3xl font-extrabold text-red-500">Danger Zone</h2>
		<form @formname="DeleteArticleForm" @onsubmit="DeleteArticle" method="post" class="my-4">
			<button class="p-3 text-sm font-bold uppercase rounded bg-red-600 text-gray-900 hover:text-blue-900">Delete Article</button>
			<AntiforgeryToken/>
		</form>
		</p>

	}

}



@code {

	private bool IsEditMode => ArticleId != null;

	private string _errorMessage = string.Empty;

	[SupplyParameterFromForm] ArticleModel? Article { get; set; }

	[Parameter] public int? ArticleId { get; set; }

	[CascadingParameter] private HttpContext? HttpContext { get; set; }

	protected override async Task OnParametersSetAsync()
	{

		if (ArticleId is not null)
		{

			var result = await Sender.Send(new GetArticleByIdForEditingQuery { Id = (int)ArticleId });

			if (result.Success)
			{

				Article ??= result.Value.Adapt<ArticleModel>();

				Article.Id = (int)ArticleId;

			}
			else
			{

				SetErrorMessage(result.Error);

			}

		}
		else
		{

			Article ??= new ArticleModel();

		}

	}

	async Task HandleSubmit()
	{

		if (IsEditMode)
		{

			if (!Article!.IsPublished)
			{

				Article.PublishedOn = null;

			}

			var command = Article.Adapt<UpdateArticleCommand>();

			var result = await Sender.Send(command);

			if (result.Success) Article = result.Value.Adapt<ArticleModel>();
			else SetErrorMessage(result.Error);

		}
		else
		{

			var command = Article.Adapt<CreateArticleCommand>();

			var result = await Sender.Send(command);

			if (result.Success) Navigation.NavigateTo($"/article-editor/{result.Value.Id}");
			else SetErrorMessage(result.Error);

		}

	}

	async Task DeleteArticle()
	{

		if (ArticleId is null) return;

		var command = new DeleteArticleCommand { Id = (int)ArticleId };

		var result = await Sender.Send(command);

		if (result.Success) Navigation.NavigateTo("/");
		else SetErrorMessage(result.Error);

	}

	void SetErrorMessage(string? error)
	{

		_errorMessage = error ?? string.Empty;

	}

}