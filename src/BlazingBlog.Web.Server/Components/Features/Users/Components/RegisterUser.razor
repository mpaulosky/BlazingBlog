@page "/register"
@using BlazingBlog.WebUI.Server.Features.Users

@inject ISender Sender
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<div class="space-y-6">
	<h2 class="text-3xl font-extrabold text-gray-50">Register</h2>
</div>

<EditForm Model="@UserModel" OnValidSubmit="HandleSubmit" FormName="RegisterUserForm" class="space-y-6 my-4">

	<DataAnnotationsValidator />

	<div>
		<label for="name" class="text-sm">User Name</label>
		<InputText id="name" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 shadow-md"
		           placeholder="Enter your user name here" @bind-Value="@UserModel.UserName"/>
		<ValidationMessage For="() => UserModel.UserName" class="text-danger"/>
	</div>

	<div>
		<label for="email" class="text-sm">Email</label>
		<InputTextArea id="email" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 shadow-md"
		               placeholder="Enter your email here" @bind-Value="@UserModel.Email"/>
		<ValidationMessage For="() => UserModel.Email" class="text-danger"/>
	</div>

	<div>
		<label for="password" class="text-sm">Password</label>
		<InputText id="password" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 shadow-md"
		           placeholder="Enter password" type="password" @bind-Value="@UserModel.Password"/>
		<ValidationMessage For="() => UserModel.Password" class="text-danger"/>
	</div>

	<div>
		<label for="confirmPassword" class="text-sm">Confirm Password</label>
		<InputText id="confirmPassword" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 shadow-md"
		           placeholder="Confirm password" type="password" @bind-Value="@UserModel.ConfirmPassword"/>
		<ValidationMessage For="() => UserModel.ConfirmPassword" class="text-danger"/>
	</div>

	<button class="w-full p-3 text-sm font-bold uppercase rounded bg-blue-400 text-gray-900" type="submit">Submit
	</button>

</EditForm>

<span class="text-danger">@_errorMessage</span>

@code {

	[SupplyParameterFromForm]
	private RegisterUserModel UserModel { get; set; } = new ();

	private string _errorMessage = string.Empty;
	
	async Task HandleSubmit()
	{

		var command = new RegisterUserCommand
		{

				UserName = UserModel.UserName,
				Email = UserModel.Email,
				Password = UserModel.Password

		};
		
		var result = await Sender.Send(command);

		if (result.Success) Navigation.NavigateTo("/login");
		else _errorMessage = result.Error ?? "Registration failed";

	}

}