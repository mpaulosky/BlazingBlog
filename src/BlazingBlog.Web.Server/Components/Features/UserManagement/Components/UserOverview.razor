@page "/user-overview"

@inject ISender Sender
@rendermode @(new InteractiveServerRenderMode(false))
@attribute [Authorize(Roles = "Admin")]

<PageTitle>User Overview</PageTitle>

<div class="space-y-6">

	<h2 class="text-3xl font-extrabold dark:text-gray-50">User Overview</h2>

	@if (_users is null)
	{
		<p>Loading users..</p>
	}
	else if (_users.Count <= 0)
	{
		<span>There are no users found.</span>
	}
	else
	{

		<QuickGrid Items="_users.AsQueryable()" PageSize="10" ShowPager="true">
			<PropertyColumn Property="@(p => p.UserName)" Sortable="true" Title="Name"/>
			<PropertyColumn Property="@(p => p.Email)" Sortable="true"/>
			<PropertyColumn Property="@(p => p.Roles)"/>
			<TemplateColumn>
				<button @onclick="() => OpenModal(context.Id, context.UserName)" 
				        class="p-1 text-sm font-bold uppercase rounded bg-blue-400 text-gray-900 inline-block hover:text-blue-700">
					ðŸ”’ Manage Roles
				</button>
			</TemplateColumn>
		</QuickGrid>

	}

	<UserRolesModal 
		ShowModal="@_showModal" 
		UserId="@_selectedUserId" 
		UserName="@_selectedUserName" 
		ModalClosed="CloseModalAsync" />

</div>


@code {

	private List<UserResponse>? _users = [];

	private bool _showModal;
	
	private string _selectedUserId = string.Empty;
	
	private string _selectedUserName = string.Empty;

	protected override async Task OnInitializedAsync()
	{

		await LoadUsersAsync();

	}

	private void OpenModal(string userId, string userName)
	{

		_selectedUserId = userId;

		_selectedUserName = userName;

		_showModal = true;

	}

	private async Task CloseModalAsync()
	{

		_showModal = false;
		
		await LoadUsersAsync();
		
		StateHasChanged();

	}
	
	private async Task LoadUsersAsync()
	{

		var result = await Sender.Send(new GetUsersQuery());

		if (result.Success) _users = result;
		else _users = [];

	}

}