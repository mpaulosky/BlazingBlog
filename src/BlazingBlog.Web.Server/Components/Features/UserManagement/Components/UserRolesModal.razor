
@inject ISender Sender

@if (ShowModal)
{
	<div class="fixed inset-0 m-0 flex items-center justify-center bg-white bg-opacity-50">
		<div class="flex flex-col max-w-md gap-2 p-6 rounded-md shadow-md bg-gray-50 text-gray-800">
			<h2 class="flex items-center gap-2 text-xl font-semibold leading-tight tracking-wide">
				Change roles for @UserName
			</h2>
			<p class="flex-1 text-gray-600">
				<QuickGrid Items="Roles.AsQueryable()">
					<PropertyColumn Property="@(r => r)" Sortable="true"/>
					<TemplateColumn>
						<button @onclick="() => RemoveRole(context)" class="p-2 text-sm">
							‚ùå
						</button>
					</TemplateColumn>
				</QuickGrid>
			</p>
			<div class="flex gap-2">
				<input type="text" @bind="_newRole" placeholder="Add New Role"
				       class="flex-1 p-2 border border-gray-300 rounded-md shadow-sm"/>
				<button @onclick="AddRole"
				        class="px-4 py-2 rounded-md shadow-sm bg-violet-600 text-gray-50 hover:text-blue-700">
					Add Role
				</button>
				<div class="flex flex-col justify-end gap-3 mt-6 sm:flex-row">
					<button @onclick="CloseModal"
					        class="px-6 py-2 rounded-sm shadow-sm bg-violet-600 text-gray-50 hover:text-blue-700">
						Close
					</button>
				</div>
			</div>
		</div>
	</div>
}

@code {

	[Parameter] public bool ShowModal { get; set; }

	[Parameter] public EventCallback<bool> ModalClosed { get; set; }

	[Parameter] public required string UserId { get; set; }

	[Parameter] public string? UserName { get; set; }

	private List<string> Roles { get; set; } = [];

	private string _newRole = string.Empty;

	protected override async Task OnParametersSetAsync()
	{

		await LoadUserRolesAsync();

	}

	private async Task AddRole()
	{

		if (!string.IsNullOrWhiteSpace(_newRole))
		{

			await Sender.Send(new AddRoleToUserCommand { UserId = UserId, RoleName = _newRole });

			await LoadUserRolesAsync();

			_newRole = string.Empty;

		}

	}

	private async Task RemoveRole(string role)
	{

		if (!string.IsNullOrWhiteSpace(role))
		{

			await Sender.Send(new RemoveRoleFromUserCommand { UserId = UserId, RoleName = role });

			await LoadUserRolesAsync();

		}

	}

	private void CloseModal()
	{

		ShowModal = false;

		_newRole = string.Empty;

		ModalClosed.InvokeAsync(ShowModal);

	}

	private async Task LoadUserRolesAsync()
	{

		if (ShowModal && UserId is not null)
		{

			Roles = (await Sender.Send(new GetUserRolesQuery { UserId = UserId })).Value ?? [];

		}

	}

}